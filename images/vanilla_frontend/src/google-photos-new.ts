import { endpoints } from "./config";
import { Layout } from "./components";
import { Signal } from "./reactive";
import { html } from "./utils";

type GClientInfo = {
  client_id: string;
  client_id_available: string;
  is_activated: boolean;
};

class GooglePhotosPage {
  private gClientInfo$ = new Signal<GClientInfo | null>(null);
  private displayActivationButton$ = new Signal(false);
  private label$ = new Signal("Upload Client secret json");

  private readonly expectedRedirect = "http://localhost:5000/api/OAuthCallback";

  constructor() {
    this.setupLayout();
    this.renderUI();
    this.initSignals();
    this.attachEventListeners();
    this.getClientInfo();
    this.unhideRoot();
  }

  private setupLayout() {
    new Layout({
      title: "Google Photos - Hachi",
      currentPage: "/google-photos.html",
      showNavbar: true
    });
  }

  private renderUI() {
    const UI = html`<div id="google-photos" style="visibility: hidden;" class="w-full h-screen flex items-center justify-center px-4">
      <div class="w-full max-w-2xl space-y-6">
        <div
          id="client-info"
          class="rounded-lg border shadow-sm bg-white/70 backdrop-blur p-5 space-y-4"
          style="display:none"
        >
          <header class="flex items-center justify-between">
            <h2 class="text-lg font-semibold">Google Photos OAuth Client</h2>
            <div
              id="client-status-activated"
              class="inline-flex items-center gap-1 rounded-full bg-emerald-100 text-emerald-700 px-3 py-1 text-xs font-medium border border-emerald-200"
              style="display:none"
            >
              <span class="w-2 h-2 rounded-full bg-emerald-500 animate-pulse"></span>
              Active
            </div>
            <div
              id="client-status-inactive"
              class="inline-flex items-center gap-1 rounded-full bg-rose-100 text-rose-700 px-3 py-1 text-xs font-medium border border-rose-200"
            >
              <span class="w-2 h-2 rounded-full bg-rose-500"></span> Inactive
            </div>
          </header>

          <div class="text-sm">
            <p
              id="client-id-label"
              class="font-mono break-all bg-gray-50 border rounded p-3 text-gray-700"
              aria-label="Client ID"
            ></p>
          </div>

          <p id="activation-info" class="text-xs text-gray-500">
            Your client is registered but not yet activated. Click Activate to start the OAuth flow.
          </p>
        </div>

        <div
          id="upload-section"
          class="rounded-lg border shadow-sm bg-white/70 backdrop-blur overflow-hidden"
        >
          <div class="p-5 space-y-4">
            <h2 class="text-lg font-semibold">Connect Google Photos</h2>
            <ul class="text-sm list-disc pl-5 space-y-1 text-gray-700">
              <li>Create an OAuth Client (Web application) in Google Cloud Console.</li>
              <li>Enable <b>Google Photos Library API</b>.</li>
              <li>
                Add redirect URI:
                <code class="bg-gray-100 px-1 py-0.5 rounded text-xs"
                  >http://localhost:5000/api/OAuthCallback</code
                >
              </li>
              <li>Your data stays between you and Google.</li>
            </ul>

            <div class="mt-4">
              <span class="block text-xs font-medium mb-1 text-gray-600"
                >Upload client_secret.json</span
              >
              <label class="group cursor-pointer w-full">
                <div
                  class="flex flex-col items-center justify-center gap-2 rounded border-2 border-dashed p-6 bg-gradient-to-br from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 transition"
                >
                  <span
                    id="upload-label"
                    class="text-sm font-medium text-blue-700 group-hover:scale-105 transition"
                  >
                    Upload Client secret json
                  </span>
                  <span class="text-[11px] text-blue-500"
                    >Only .json generated by Google Cloud Console</span
                  >
                </div>
                <input
                  id="file"
                  type="file"
                  class="hidden"
                  accept=".json,application/json"
                  aria-label="Upload Google OAuth client secret JSON"
                />
              </label>
            </div>
          </div>
        </div>

        <div id="activation-button-container" class="flex justify-center hidden">
          <button
            id="activate-btn"
            class="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white font-medium px-5 py-2.5 rounded-md shadow-sm transition text-sm"
          >
            Activate Google Photos
          </button>
        </div>
      </div>
    </div>`;

    document.getElementById("main")!.innerHTML = UI;
  }

  private initSignals() {
    this.gClientInfo$.subscribe((value) => {
      const clientIdLabel = document.getElementById("client-id-label");
      if (clientIdLabel && value) clientIdLabel.innerText = value.client_id;

      // NOTE: Original logic shows activation info only when activated (may be inverted from intended text)
      const activationInfo = document.getElementById("activation-info");
      if (activationInfo) {
        if (value?.is_activated) activationInfo.classList.remove("hidden");
        else activationInfo.classList.add("hidden");
      }

      const clientStatusActivated = document.getElementById("client-status-activated");
      if (clientStatusActivated)
        clientStatusActivated.style.display = value?.is_activated ? "" : "none";

      const clientStatusInactive = document.getElementById("client-status-inactive");
      if (clientStatusInactive)
        clientStatusInactive.style.display = value?.is_activated ? "none" : "";

      const clientInfoSection = document.getElementById("client-info");
      if (clientInfoSection) clientInfoSection.style.display = value ? "" : "none";

      const uploadSection = document.getElementById("upload-section");
      if (uploadSection) uploadSection.style.display = !value ? "" : "none";
    });

    this.displayActivationButton$.subscribe((value) => {
      const container = document.getElementById("activation-button-container");
      if (container) container.classList.toggle("hidden", !value);
    });

    this.label$.subscribe((value) => {
      const uploadLabel = document.getElementById("upload-label");
      if (uploadLabel) uploadLabel.innerText = value;
    });
  }

  private attachEventListeners() {
    const fileInput = document.getElementById("file");
    if (fileInput) {
      fileInput.addEventListener("change", (e) => this.handleClientUpload(e));
    }

    const activationContainer = document.getElementById("activation-button-container");
    if (activationContainer) {
      activationContainer.addEventListener("click", (e) => this.activate(e));
    }
  }

  private unhideRoot() {
    const root = document.getElementById("google-photos");
    if (root) root.style.visibility = "visible";
  }

  private async getClientInfo() {
    try {
      const response = await fetch(endpoints.BASE_URL + "/api/gClientInfo");
      if (!response.ok) return;
      const data: GClientInfo = await response.json();
      if (data.client_id_available) {
        this.gClientInfo$.value = data;
        this.displayActivationButton$.value = !this.gClientInfo$.value?.is_activated;
      }
    } catch {
      // silent
    }
  }

  private async pollActivationStatus() {
    try {
      const response = await fetch(endpoints.BASE_URL + "/api/statusGAuthFlow");
      if (!response.ok) return setTimeout(() => this.pollActivationStatus(), 2000);
      const data = await response.json();
      if (!data["finished"]) {
        return setTimeout(() => this.pollActivationStatus(), 2000);
      }
      this.displayActivationButton$.value = false;
      alert("Account Activation: " + data["status"].toString());
      this.getClientInfo();
    } catch {
      setTimeout(() => this.pollActivationStatus(), 2000);
    }
  }

  private async activate(event: Event) {
    event.preventDefault();
    const target = event.target as HTMLButtonElement;
    if (target.tagName !== "BUTTON") return;
    target.disabled = true;
    const originalText = target.innerText;
    target.innerText = "activation in progress...";
    try {
      const response = await fetch(endpoints.BASE_URL + "/api/beginGAuthFlow");
      if (!response.ok) throw new Error();
      setTimeout(() => this.pollActivationStatus(), 1000);
    } catch {
      alert("Some error occurred while starting authorization flow!");
      target.disabled = false;
      target.innerText = originalText;
    }
  }

  private async handleClientUpload(event: Event) {
    event.preventDefault();
    const input = event.target as HTMLInputElement;
    input.disabled = true;
    this.label$.value = "upload in progress..";

    const file = input.files?.[0];
    if (!file) {
      alert("No file selected");
      input.disabled = false;
      this.label$.value = "Upload Client secret json";
      return;
    }

    const reader = new FileReader();
    reader.onload = async () => {
      try {
        const clientData = JSON.parse(reader.result as string);
        const isWebApp = Object.prototype.hasOwnProperty.call(clientData, "web");
        let redirectUriValid = false;

        if (isWebApp && clientData.web && Array.isArray(clientData.web.redirect_uris)) {
          redirectUriValid = clientData.web.redirect_uris.includes(this.expectedRedirect);
        }

        if (!(isWebApp && redirectUriValid)) {
            alert(
              "Must be a webapp and redirect_uris must contain: " + this.expectedRedirect
            );
            input.disabled = false;
            this.label$.value = "Upload Client secret json";
            return;
        }

        const form = new FormData();
        form.append("client_data", reader.result as string);

        const response = await fetch(endpoints.BASE_URL + "/api/uploadClientData", {
          method: "POST",
          body: form
        });

        if (!response.ok) throw new Error("Failed to upload client data");

        this.label$.value = "Upload Client secret json";
        input.disabled = false;
        this.displayActivationButton$.value = true;
        await this.getClientInfo();
      } catch {
        alert("Invalid JSON file");
        input.disabled = false;
        this.label$.value = "Upload Client secret json";
      }
    };
    reader.readAsText(file);
  }
}

// Instantiate
new GooglePhotosPage();
